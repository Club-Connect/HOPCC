// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// enum ClubMemberType {
//     ADMIN
//     GRADER
// }

enum SocialMediaPlatformType {
    TWITTER
    INSTAGRAM
    FACEBOOK
    LINKEDIN
    WEBSITE
}

enum ClubApplicationQuestionType {
    TEXT_INPUT
    TEXT_FIELD
    MULTIPLE_CHOICE
    MULTIPLE_SELECT
    FILE_UPLOAD
}

enum ClubApplicationStatus {
    DRAFT
    OPEN
    CLOSED
}

model User {
    userId          String       @id @default(cuid())
    externalId      String       @unique
    firstName       String
    lastName        String
    emailAddress    String
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    // clubMemberships ClubMember[]
}

model Club {
    id               String            @id @default(cuid())
    name             String            @unique
    socialMedia      SocialMedia[]
    // members          ClubMember[]
    clubApplications ClubApplication[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    ClubProfile      ClubProfile[]
}

// model ClubMember {
//     clubId    String
//     club      Club           @relation(fields: [clubId], references: [id], onDelete: Cascade)
//     userId    String
//     user      User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
//     type      ClubMemberType
//     createdAt DateTime       @default(now())
//     updatedAt DateTime       @updatedAt

//     @@id([clubId, userId])
// }

model ClubProfile {
    id              String            @id @default(cuid())
    clubId          String
    club            Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
    description     String            @default("")
    timelineDesc    String            @default("") @db.VarChar(500)
    events          ClubEvent[]
    ClubContactInfo ClubContactInfo[]
}

model ClubContactInfo {
    id            String      @id @default(cuid())
    clubProfile   ClubProfile @relation(fields: [clubProfileId], references: [id])
    clubProfileId String
    firstName     String
    lastName      String
    email         String
    phone         String?
    role          String
}

model SocialMedia {
    id        String                  @id @default(cuid())
    clubId    String
    club      Club                    @relation(fields: [clubId], references: [id], onDelete: Cascade)
    platform  SocialMediaPlatformType
    url       String
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt
}

model ClubEvent {
    id            String      @id @default(cuid())
    clubProfile   ClubProfile @relation(fields: [clubProfileId], references: [id])
    clubProfileId String
    name          String
    date          DateTime
    inPerson      Boolean
    location      String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model ClubApplication {
    id                             String                           @id @default(cuid())
    clubId                         String
    club                           Club                             @relation(fields: [clubId], references: [id], onDelete: Cascade)
    deadline                       DateTime?
    status                         ClubApplicationStatus            @default(DRAFT)
    questions                      ClubApplicationQuestion[]
    ClubApplicationScoringCriteria ClubApplicationScoringCriteria[]
    createdAt                      DateTime                         @default(now())
    updatedAt                      DateTime                         @updatedAt
}

model ClubApplicationQuestion {
    id                String                      @id @default(cuid())
    clubApplication   ClubApplication             @relation(fields: [clubApplicationId], references: [id], onDelete: Cascade)
    orderNumber       Int
    clubApplicationId String
    question          String
    type              ClubApplicationQuestionType
    createdAt         DateTime                    @default(now())
    updatedAt         DateTime                    @updatedAt
}

model ClubApplicationScoringCriteria {
    id                String          @id @default(cuid())
    clubApplication   ClubApplication @relation(fields: [clubApplicationId], references: [id], onDelete: Cascade)
    clubApplicationId String
    weight            Int             @default(1)
    orderNumber       Int
    criteria          String
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
}
